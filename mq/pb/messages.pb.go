// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor-mq/mq/pb/messages.proto

package pb

import (
	actor "actor-mq/actor"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateRouterMsg struct {
	ChannelName string     `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Sender      *actor.PID `protobuf:"bytes,2,opt,name=Sender,proto3" json:"Sender,omitempty"`
}

func (m *CreateRouterMsg) Reset()      { *m = CreateRouterMsg{} }
func (*CreateRouterMsg) ProtoMessage() {}
func (*CreateRouterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{0}
}
func (m *CreateRouterMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRouterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRouterMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRouterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouterMsg.Merge(m, src)
}
func (m *CreateRouterMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateRouterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouterMsg proto.InternalMessageInfo

func (m *CreateRouterMsg) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *CreateRouterMsg) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type CreateRouterRespMsg struct {
	ChannelName string `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	ACK         bool   `protobuf:"varint,3,opt,name=ACK,proto3" json:"ACK,omitempty"`
}

func (m *CreateRouterRespMsg) Reset()      { *m = CreateRouterRespMsg{} }
func (*CreateRouterRespMsg) ProtoMessage() {}
func (*CreateRouterRespMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{1}
}
func (m *CreateRouterRespMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRouterRespMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRouterRespMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRouterRespMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouterRespMsg.Merge(m, src)
}
func (m *CreateRouterRespMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateRouterRespMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouterRespMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouterRespMsg proto.InternalMessageInfo

func (m *CreateRouterRespMsg) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *CreateRouterRespMsg) GetACK() bool {
	if m != nil {
		return m.ACK
	}
	return false
}

type SubscribeMsg struct {
	ChannelName string     `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Subscriber  *actor.PID `protobuf:"bytes,2,opt,name=Subscriber,proto3" json:"Subscriber,omitempty"`
}

func (m *SubscribeMsg) Reset()      { *m = SubscribeMsg{} }
func (*SubscribeMsg) ProtoMessage() {}
func (*SubscribeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{2}
}
func (m *SubscribeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeMsg.Merge(m, src)
}
func (m *SubscribeMsg) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeMsg proto.InternalMessageInfo

func (m *SubscribeMsg) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *SubscribeMsg) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type UnsubscribeMsg struct {
	ChannelName string     `protobuf:"bytes,1,opt,name=ChannelName,proto3" json:"ChannelName,omitempty"`
	Subscriber  *actor.PID `protobuf:"bytes,2,opt,name=Subscriber,proto3" json:"Subscriber,omitempty"`
}

func (m *UnsubscribeMsg) Reset()      { *m = UnsubscribeMsg{} }
func (*UnsubscribeMsg) ProtoMessage() {}
func (*UnsubscribeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{3}
}
func (m *UnsubscribeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsubscribeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeMsg.Merge(m, src)
}
func (m *UnsubscribeMsg) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeMsg proto.InternalMessageInfo

func (m *UnsubscribeMsg) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *UnsubscribeMsg) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type SyncRouterMsg struct {
	Router []*actor.PID `protobuf:"bytes,1,rep,name=Router,proto3" json:"Router,omitempty"`
}

func (m *SyncRouterMsg) Reset()      { *m = SyncRouterMsg{} }
func (*SyncRouterMsg) ProtoMessage() {}
func (*SyncRouterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{4}
}
func (m *SyncRouterMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRouterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRouterMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRouterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRouterMsg.Merge(m, src)
}
func (m *SyncRouterMsg) XXX_Size() int {
	return m.Size()
}
func (m *SyncRouterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRouterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRouterMsg proto.InternalMessageInfo

func (m *SyncRouterMsg) GetRouter() []*actor.PID {
	if m != nil {
		return m.Router
	}
	return nil
}

type CommonMsg struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Target *actor.PID `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	Msg    string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Time   string     `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *CommonMsg) Reset()      { *m = CommonMsg{} }
func (*CommonMsg) ProtoMessage() {}
func (*CommonMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{5}
}
func (m *CommonMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonMsg.Merge(m, src)
}
func (m *CommonMsg) XXX_Size() int {
	return m.Size()
}
func (m *CommonMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommonMsg proto.InternalMessageInfo

func (m *CommonMsg) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *CommonMsg) GetTarget() *actor.PID {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CommonMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CommonMsg) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type SyncCommand struct {
	RouterList []*actor.PID `protobuf:"bytes,1,rep,name=RouterList,proto3" json:"RouterList,omitempty"`
}

func (m *SyncCommand) Reset()      { *m = SyncCommand{} }
func (*SyncCommand) ProtoMessage() {}
func (*SyncCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_55e314e53eddaccf, []int{6}
}
func (m *SyncCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommand.Merge(m, src)
}
func (m *SyncCommand) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommand proto.InternalMessageInfo

func (m *SyncCommand) GetRouterList() []*actor.PID {
	if m != nil {
		return m.RouterList
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRouterMsg)(nil), "pb.CreateRouterMsg")
	proto.RegisterType((*CreateRouterRespMsg)(nil), "pb.CreateRouterRespMsg")
	proto.RegisterType((*SubscribeMsg)(nil), "pb.SubscribeMsg")
	proto.RegisterType((*UnsubscribeMsg)(nil), "pb.UnsubscribeMsg")
	proto.RegisterType((*SyncRouterMsg)(nil), "pb.SyncRouterMsg")
	proto.RegisterType((*CommonMsg)(nil), "pb.CommonMsg")
	proto.RegisterType((*SyncCommand)(nil), "pb.SyncCommand")
}

func init() { proto.RegisterFile("actor-mq/mq/pb/messages.proto", fileDescriptor_55e314e53eddaccf) }

var fileDescriptor_55e314e53eddaccf = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x9d, 0xb4, 0xa5, 0x7c, 0xbd, 0xfd, 0xfe, 0x18, 0x37, 0x43, 0xc1, 0x30, 0x64, 0x55, 0x04,
	0x5b, 0xb0, 0x6e, 0x5c, 0xea, 0xb8, 0x29, 0xfe, 0x20, 0x53, 0xc5, 0x8d, 0x08, 0x33, 0x6d, 0x18,
	0x0b, 0x26, 0x33, 0x4d, 0xd2, 0x45, 0x77, 0x3e, 0x82, 0x8f, 0xe1, 0xa3, 0xb8, 0xec, 0xb2, 0x4b,
	0x9b, 0x6e, 0x5c, 0xf6, 0x11, 0x24, 0x93, 0x52, 0x07, 0xa9, 0xd0, 0x8d, 0x9b, 0x70, 0x72, 0xcf,
	0xbd, 0x27, 0x27, 0x27, 0x81, 0xdd, 0xa8, 0xaf, 0x52, 0xb1, 0xcf, 0x46, 0x6d, 0x36, 0x6a, 0x67,
	0x71, 0x9b, 0x51, 0x29, 0xa3, 0x84, 0xca, 0x56, 0x26, 0x52, 0x95, 0xba, 0xa5, 0x2c, 0x6e, 0x34,
	0xd6, 0x2d, 0x39, 0xb0, 0xab, 0xe5, 0xc9, 0x2d, 0xfc, 0x0b, 0x04, 0x8d, 0x14, 0x0d, 0xd3, 0xb1,
	0xa2, 0xe2, 0x42, 0x26, 0xae, 0x0f, 0xf5, 0xe0, 0x21, 0xe2, 0x9c, 0x3e, 0x5e, 0x46, 0x8c, 0x7a,
	0xc8, 0x47, 0xcd, 0x5a, 0x58, 0x2c, 0xb9, 0x04, 0xaa, 0x3d, 0xca, 0x07, 0x54, 0x78, 0x25, 0x1f,
	0x35, 0xeb, 0x07, 0xd0, 0xb2, 0x92, 0x57, 0xdd, 0xd3, 0x70, 0xc5, 0x90, 0x2e, 0xec, 0x14, 0x85,
	0x43, 0x2a, 0xb3, 0xed, 0xc4, 0xff, 0x43, 0xf9, 0x38, 0x38, 0xf3, 0xca, 0x3e, 0x6a, 0xfe, 0x0a,
	0x0d, 0x24, 0x77, 0xf0, 0xbb, 0x37, 0x8e, 0x65, 0x5f, 0x0c, 0x63, 0xba, 0x9d, 0xc6, 0x1e, 0xc0,
	0x7a, 0x62, 0x93, 0xc9, 0x02, 0x4b, 0xee, 0xe1, 0xef, 0x0d, 0x97, 0x3f, 0xa7, 0xdf, 0x81, 0x3f,
	0xbd, 0x09, 0xef, 0x7f, 0xe6, 0x4b, 0xa0, 0x6a, 0x37, 0x1e, 0xf2, 0xcb, 0x5f, 0xd3, 0xb3, 0x0c,
	0x99, 0x40, 0x2d, 0x48, 0x19, 0x4b, 0xf9, 0x6a, 0x60, 0x15, 0x37, 0xfa, 0x2e, 0x6e, 0xd3, 0x73,
	0x1d, 0x89, 0x84, 0xaa, 0x4d, 0x4f, 0x62, 0x19, 0x93, 0x2c, 0x93, 0x49, 0x9e, 0x6c, 0x2d, 0x34,
	0xd0, 0x75, 0xa1, 0xa2, 0x86, 0x8c, 0x7a, 0x95, 0xbc, 0x94, 0x63, 0x72, 0x04, 0x75, 0xe3, 0xd7,
	0x1c, 0x1f, 0xf1, 0x81, 0xb9, 0xaa, 0xf5, 0x74, 0x3e, 0x94, 0x6a, 0x83, 0xe3, 0x02, 0x7b, 0x72,
	0x38, 0x9d, 0x63, 0x67, 0x36, 0xc7, 0xce, 0x72, 0x8e, 0xd1, 0x93, 0xc6, 0xe8, 0x45, 0x63, 0xf4,
	0xaa, 0x31, 0x9a, 0x6a, 0x8c, 0xde, 0x34, 0x46, 0xef, 0x1a, 0x3b, 0x4b, 0x8d, 0xd1, 0xf3, 0x02,
	0x3b, 0xd3, 0x05, 0x76, 0x66, 0x0b, 0xec, 0xc4, 0xd5, 0xfc, 0x27, 0x76, 0x3e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x19, 0xee, 0xf4, 0x00, 0xca, 0x02, 0x00, 0x00,
}

func (this *CreateRouterMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRouterMsg)
	if !ok {
		that2, ok := that.(CreateRouterMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelName != that1.ChannelName {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *CreateRouterRespMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRouterRespMsg)
	if !ok {
		that2, ok := that.(CreateRouterRespMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelName != that1.ChannelName {
		return false
	}
	if this.ACK != that1.ACK {
		return false
	}
	return true
}
func (this *SubscribeMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeMsg)
	if !ok {
		that2, ok := that.(SubscribeMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelName != that1.ChannelName {
		return false
	}
	if !this.Subscriber.Equal(that1.Subscriber) {
		return false
	}
	return true
}
func (this *UnsubscribeMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsubscribeMsg)
	if !ok {
		that2, ok := that.(UnsubscribeMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelName != that1.ChannelName {
		return false
	}
	if !this.Subscriber.Equal(that1.Subscriber) {
		return false
	}
	return true
}
func (this *SyncRouterMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncRouterMsg)
	if !ok {
		that2, ok := that.(SyncRouterMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Router) != len(that1.Router) {
		return false
	}
	for i := range this.Router {
		if !this.Router[i].Equal(that1.Router[i]) {
			return false
		}
	}
	return true
}
func (this *CommonMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonMsg)
	if !ok {
		that2, ok := that.(CommonMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *SyncCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncCommand)
	if !ok {
		that2, ok := that.(SyncCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RouterList) != len(that1.RouterList) {
		return false
	}
	for i := range this.RouterList {
		if !this.RouterList[i].Equal(that1.RouterList[i]) {
			return false
		}
	}
	return true
}
func (this *CreateRouterMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateRouterMsg{")
	s = append(s, "ChannelName: "+fmt.Sprintf("%#v", this.ChannelName)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRouterRespMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateRouterRespMsg{")
	s = append(s, "ChannelName: "+fmt.Sprintf("%#v", this.ChannelName)+",\n")
	s = append(s, "ACK: "+fmt.Sprintf("%#v", this.ACK)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SubscribeMsg{")
	s = append(s, "ChannelName: "+fmt.Sprintf("%#v", this.ChannelName)+",\n")
	if this.Subscriber != nil {
		s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnsubscribeMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UnsubscribeMsg{")
	s = append(s, "ChannelName: "+fmt.Sprintf("%#v", this.ChannelName)+",\n")
	if this.Subscriber != nil {
		s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncRouterMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SyncRouterMsg{")
	if this.Router != nil {
		s = append(s, "Router: "+fmt.Sprintf("%#v", this.Router)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CommonMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CommonMsg{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SyncCommand{")
	if this.RouterList != nil {
		s = append(s, "RouterList: "+fmt.Sprintf("%#v", this.RouterList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateRouterMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRouterMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRouterMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRouterRespMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRouterRespMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRouterRespMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ACK {
		i--
		if m.ACK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsubscribeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsubscribeMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRouterMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRouterMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRouterMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Router) > 0 {
		for iNdEx := len(m.Router) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Router[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommonMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouterList) > 0 {
		for iNdEx := len(m.RouterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RouterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRouterMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *CreateRouterRespMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ACK {
		n += 2
	}
	return n
}

func (m *SubscribeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UnsubscribeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *SyncRouterMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Router) > 0 {
		for _, e := range m.Router {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *CommonMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *SyncCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RouterList) > 0 {
		for _, e := range m.RouterList {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRouterMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRouterMsg{`,
		`ChannelName:` + fmt.Sprintf("%v", this.ChannelName) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRouterRespMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRouterRespMsg{`,
		`ChannelName:` + fmt.Sprintf("%v", this.ChannelName) + `,`,
		`ACK:` + fmt.Sprintf("%v", this.ACK) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeMsg{`,
		`ChannelName:` + fmt.Sprintf("%v", this.ChannelName) + `,`,
		`Subscriber:` + strings.Replace(fmt.Sprintf("%v", this.Subscriber), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnsubscribeMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsubscribeMsg{`,
		`ChannelName:` + fmt.Sprintf("%v", this.ChannelName) + `,`,
		`Subscriber:` + strings.Replace(fmt.Sprintf("%v", this.Subscriber), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncRouterMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRouter := "[]*PID{"
	for _, f := range this.Router {
		repeatedStringForRouter += strings.Replace(fmt.Sprintf("%v", f), "PID", "actor.PID", 1) + ","
	}
	repeatedStringForRouter += "}"
	s := strings.Join([]string{`&SyncRouterMsg{`,
		`Router:` + repeatedStringForRouter + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonMsg{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Target:` + strings.Replace(fmt.Sprintf("%v", this.Target), "PID", "actor.PID", 1) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncCommand) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRouterList := "[]*PID{"
	for _, f := range this.RouterList {
		repeatedStringForRouterList += strings.Replace(fmt.Sprintf("%v", f), "PID", "actor.PID", 1) + ","
	}
	repeatedStringForRouterList += "}"
	s := strings.Join([]string{`&SyncCommand{`,
		`RouterList:` + repeatedStringForRouterList + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRouterMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRouterMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRouterMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRouterRespMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRouterRespMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRouterRespMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ACK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRouterMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRouterMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRouterMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = append(m.Router, &actor.PID{})
			if err := m.Router[len(m.Router)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &actor.PID{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterList = append(m.RouterList, &actor.PID{})
			if err := m.RouterList[len(m.RouterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
