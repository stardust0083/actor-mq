// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor-mq/remote/remote_protocol.proto

package remote

import (
	actor "actor-mq/actor"
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageEnvelope struct {
	TypeName    string     `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	MessageData []byte     `protobuf:"bytes,2,opt,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
	Target      *actor.PID `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *MessageEnvelope) Reset()      { *m = MessageEnvelope{} }
func (*MessageEnvelope) ProtoMessage() {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fb54d0f8c0b850, []int{0}
}
func (m *MessageEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEnvelope.Merge(m, src)
}
func (m *MessageEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *MessageEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEnvelope proto.InternalMessageInfo

func (m *MessageEnvelope) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *MessageEnvelope) GetMessageData() []byte {
	if m != nil {
		return m.MessageData
	}
	return nil
}

func (m *MessageEnvelope) GetTarget() *actor.PID {
	if m != nil {
		return m.Target
	}
	return nil
}

type Unit struct {
}

func (m *Unit) Reset()      { *m = Unit{} }
func (*Unit) ProtoMessage() {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_84fb54d0f8c0b850, []int{1}
}
func (m *Unit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(m, src)
}
func (m *Unit) XXX_Size() int {
	return m.Size()
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MessageEnvelope)(nil), "remote.MessageEnvelope")
	proto.RegisterType((*Unit)(nil), "remote.Unit")
}

func init() {
	proto.RegisterFile("actor-mq/remote/remote_protocol.proto", fileDescriptor_84fb54d0f8c0b850)
}

var fileDescriptor_84fb54d0f8c0b850 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x4c, 0x2e, 0xc9,
	0x2f, 0xd2, 0xcd, 0x2d, 0xd4, 0x2f, 0x4a, 0xcd, 0xcd, 0x2f, 0x49, 0x85, 0x52, 0xf1, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0xc9, 0xf9, 0x39, 0x7a, 0x60, 0x86, 0x10, 0x1b, 0x44, 0x58, 0x4a, 0x0a, 0xae,
	0x1c, 0xcc, 0x80, 0x90, 0x10, 0x35, 0x4a, 0xa5, 0x5c, 0xfc, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9,
	0xa9, 0xae, 0x79, 0x65, 0xa9, 0x39, 0xf9, 0x05, 0xa9, 0x42, 0xd2, 0x5c, 0x9c, 0x25, 0x95, 0x05,
	0xa9, 0xf1, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x1c, 0x20, 0x01,
	0xbf, 0xc4, 0xdc, 0x54, 0x21, 0x45, 0x2e, 0x9e, 0x5c, 0x88, 0xfa, 0xf8, 0x94, 0xc4, 0x92, 0x44,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x6e, 0xa8, 0x98, 0x4b, 0x62, 0x49, 0xa2, 0x90, 0x12,
	0x17, 0x5b, 0x49, 0x62, 0x51, 0x7a, 0x6a, 0x89, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0xb7, 0x11, 0x97,
	0x1e, 0xc4, 0xc2, 0x00, 0x4f, 0x97, 0x20, 0xa8, 0x8c, 0x12, 0x1b, 0x17, 0x4b, 0x68, 0x5e, 0x66,
	0x89, 0x91, 0x13, 0x17, 0x5b, 0x10, 0xd8, 0x91, 0x42, 0x16, 0x5c, 0xdc, 0xbe, 0xc5, 0xe9, 0xc1,
	0xa9, 0x79, 0x29, 0x41, 0xa9, 0xc9, 0x65, 0x42, 0xe2, 0x7a, 0x10, 0xc7, 0xeb, 0xa1, 0xb9, 0x4e,
	0x8a, 0x07, 0x26, 0x01, 0xd2, 0xaf, 0xc4, 0xa0, 0xc1, 0xe8, 0x64, 0x72, 0xe1, 0xa1, 0x1c, 0xc3,
	0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e,
	0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48,
	0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1,
	0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x7f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x2d,
	0xcb, 0xae, 0x4c, 0x01, 0x00, 0x00,
}

func (this *MessageEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageEnvelope)
	if !ok {
		that2, ok := that.(MessageEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TypeName != that1.TypeName {
		return false
	}
	if !bytes.Equal(this.MessageData, that1.MessageData) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *Unit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Unit)
	if !ok {
		that2, ok := that.(Unit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MessageEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&remote.MessageEnvelope{")
	s = append(s, "TypeName: "+fmt.Sprintf("%#v", this.TypeName)+",\n")
	s = append(s, "MessageData: "+fmt.Sprintf("%#v", this.MessageData)+",\n")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Unit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&remote.Unit{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRemoteProtocol(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteClient interface {
	MsgSendRecv(ctx context.Context, opts ...grpc.CallOption) (Remote_MsgSendRecvClient, error)
}

type remoteClient struct {
	cc *grpc.ClientConn
}

func NewRemoteClient(cc *grpc.ClientConn) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) MsgSendRecv(ctx context.Context, opts ...grpc.CallOption) (Remote_MsgSendRecvClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Remote_serviceDesc.Streams[0], "/remote.Remote/MsgSendRecv", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteMsgSendRecvClient{stream}
	return x, nil
}

type Remote_MsgSendRecvClient interface {
	Send(*MessageEnvelope) error
	CloseAndRecv() (*Unit, error)
	grpc.ClientStream
}

type remoteMsgSendRecvClient struct {
	grpc.ClientStream
}

func (x *remoteMsgSendRecvClient) Send(m *MessageEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteMsgSendRecvClient) CloseAndRecv() (*Unit, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Unit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteServer is the server API for Remote service.
type RemoteServer interface {
	MsgSendRecv(Remote_MsgSendRecvServer) error
}

// UnimplementedRemoteServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteServer struct {
}

func (*UnimplementedRemoteServer) MsgSendRecv(srv Remote_MsgSendRecvServer) error {
	return status.Errorf(codes.Unimplemented, "method MsgSendRecv not implemented")
}

func RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {
	s.RegisterService(&_Remote_serviceDesc, srv)
}

func _Remote_MsgSendRecv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteServer).MsgSendRecv(&remoteMsgSendRecvServer{stream})
}

type Remote_MsgSendRecvServer interface {
	SendAndClose(*Unit) error
	Recv() (*MessageEnvelope, error)
	grpc.ServerStream
}

type remoteMsgSendRecvServer struct {
	grpc.ServerStream
}

func (x *remoteMsgSendRecvServer) SendAndClose(m *Unit) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteMsgSendRecvServer) Recv() (*MessageEnvelope, error) {
	m := new(MessageEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Remote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MsgSendRecv",
			Handler:       _Remote_MsgSendRecv_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "actor-mq/remote/remote_protocol.proto",
}

func (m *MessageEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemoteProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MessageData) > 0 {
		i -= len(m.MessageData)
		copy(dAtA[i:], m.MessageData)
		i = encodeVarintRemoteProtocol(dAtA, i, uint64(len(m.MessageData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintRemoteProtocol(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Unit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRemoteProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovRemoteProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovRemoteProtocol(uint64(l))
	}
	l = len(m.MessageData)
	if l > 0 {
		n += 1 + l + sovRemoteProtocol(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovRemoteProtocol(uint64(l))
	}
	return n
}

func (m *Unit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRemoteProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRemoteProtocol(x uint64) (n int) {
	return sovRemoteProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageEnvelope{`,
		`TypeName:` + fmt.Sprintf("%v", this.TypeName) + `,`,
		`MessageData:` + fmt.Sprintf("%v", this.MessageData) + `,`,
		`Target:` + strings.Replace(fmt.Sprintf("%v", this.Target), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Unit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Unit{`,
		`}`,
	}, "")
	return s
}
func valueToStringRemoteProtocol(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageData = append(m.MessageData[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageData == nil {
				m.MessageData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &actor.PID{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemoteProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRemoteProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRemoteProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRemoteProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRemoteProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRemoteProtocol = fmt.Errorf("proto: unexpected end of group")
)
